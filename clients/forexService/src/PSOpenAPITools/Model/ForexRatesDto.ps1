#
# ForexService
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 2.0.1.4089
# Contact: support@fenix-alliance.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Success
No description available.
.PARAMETER Date
No description available.
.PARAMETER Base
No description available.
.PARAMETER Timestamp
No description available.
.PARAMETER RequestTimestamp
No description available.
.PARAMETER Rates
No description available.
.OUTPUTS

ForexRatesDto<PSCustomObject>
#>

function Initialize-ForexRatesDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Success},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Date},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Base},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Timestamp},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${RequestTimestamp},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Rates}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ForexRatesDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "success" = ${Success}
            "date" = ${Date}
            "base" = ${Base}
            "timestamp" = ${Timestamp}
            "requestTimestamp" = ${RequestTimestamp}
            "rates" = ${Rates}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ForexRatesDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to ForexRatesDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ForexRatesDto<PSCustomObject>
#>
function ConvertFrom-JsonToForexRatesDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ForexRatesDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ForexRatesDto
        $AllProperties = ("success", "date", "base", "timestamp", "requestTimestamp", "rates")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "success"))) { #optional property not found
            $Success = $null
        } else {
            $Success = $JsonParameters.PSobject.Properties["success"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "date"))) { #optional property not found
            $Date = $null
        } else {
            $Date = $JsonParameters.PSobject.Properties["date"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "base"))) { #optional property not found
            $Base = $null
        } else {
            $Base = $JsonParameters.PSobject.Properties["base"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requestTimestamp"))) { #optional property not found
            $RequestTimestamp = $null
        } else {
            $RequestTimestamp = $JsonParameters.PSobject.Properties["requestTimestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rates"))) { #optional property not found
            $Rates = $null
        } else {
            $Rates = $JsonParameters.PSobject.Properties["rates"].value
        }

        $PSO = [PSCustomObject]@{
            "success" = ${Success}
            "date" = ${Date}
            "base" = ${Base}
            "timestamp" = ${Timestamp}
            "requestTimestamp" = ${RequestTimestamp}
            "rates" = ${Rates}
        }

        return $PSO
    }

}

