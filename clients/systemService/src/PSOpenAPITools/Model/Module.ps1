#
# SystemService
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 2.0.1.4089
# Contact: support@fenix-alliance.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Enable
No description available.
.PARAMETER Active
No description available.
.PARAMETER Order
No description available.
.PARAMETER Id
No description available.
.PARAMETER Name
No description available.
.PARAMETER FullName
No description available.
.PARAMETER Description
No description available.
.PARAMETER Type
No description available.
.PARAMETER Configuration
No description available.
.PARAMETER Author
No description available.
.PARAMETER AuthorUrl
No description available.
.PARAMETER License
No description available.
.PARAMETER RequireLicenseAcceptance
No description available.
.PARAMETER Repository
No description available.
.PARAMETER Path
No description available.
.PARAMETER Icon
No description available.
.PARAMETER Image
No description available.
.PARAMETER NuSpecPath
No description available.
.PARAMETER Manifest
No description available.
.PARAMETER Documentation
No description available.
.PARAMETER Website
No description available.
.PARAMETER Logo
No description available.
.PARAMETER SwaggerSpec
No description available.
.PARAMETER SwaggerSpecs
No description available.
.PARAMETER Url
No description available.
.PARAMETER AssemblyPaths
No description available.
.PARAMETER MarkedForDeletion
No description available.
.PARAMETER Version
No description available.
.OUTPUTS

Module<PSCustomObject>
#>

function Initialize-Module {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enable},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Active},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Order},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FullName},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("0", "1", "2", "3")]
        [System.Nullable[Int32]]
        ${Type},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Configuration},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Author},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AuthorUrl},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${License},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${RequireLicenseAcceptance},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Repository},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Path},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Icon},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Image},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NuSpecPath},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Manifest},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Documentation},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Website},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Logo},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${SwaggerSpec},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${SwaggerSpecs},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${AssemblyPaths},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${MarkedForDeletion},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Version}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Module' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "enable" = ${Enable}
            "active" = ${Active}
            "order" = ${Order}
            "id" = ${Id}
            "name" = ${Name}
            "fullName" = ${FullName}
            "description" = ${Description}
            "type" = ${Type}
            "configuration" = ${Configuration}
            "author" = ${Author}
            "authorUrl" = ${AuthorUrl}
            "license" = ${License}
            "requireLicenseAcceptance" = ${RequireLicenseAcceptance}
            "repository" = ${Repository}
            "path" = ${Path}
            "icon" = ${Icon}
            "image" = ${Image}
            "nuSpecPath" = ${NuSpecPath}
            "manifest" = ${Manifest}
            "documentation" = ${Documentation}
            "website" = ${Website}
            "logo" = ${Logo}
            "swaggerSpec" = ${SwaggerSpec}
            "swaggerSpecs" = ${SwaggerSpecs}
            "url" = ${Url}
            "assemblyPaths" = ${AssemblyPaths}
            "markedForDeletion" = ${MarkedForDeletion}
            "version" = ${Version}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Module<PSCustomObject>

.DESCRIPTION

Convert from JSON to Module<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Module<PSCustomObject>
#>
function ConvertFrom-JsonToModule {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Module' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Module
        $AllProperties = ("enable", "active", "order", "id", "name", "fullName", "description", "type", "configuration", "author", "authorUrl", "license", "requireLicenseAcceptance", "repository", "path", "icon", "image", "nuSpecPath", "manifest", "documentation", "website", "logo", "swaggerSpec", "swaggerSpecs", "url", "assemblyPaths", "markedForDeletion", "version")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enable"))) { #optional property not found
            $Enable = $null
        } else {
            $Enable = $JsonParameters.PSobject.Properties["enable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "active"))) { #optional property not found
            $Active = $null
        } else {
            $Active = $JsonParameters.PSobject.Properties["active"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "order"))) { #optional property not found
            $Order = $null
        } else {
            $Order = $JsonParameters.PSobject.Properties["order"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fullName"))) { #optional property not found
            $FullName = $null
        } else {
            $FullName = $JsonParameters.PSobject.Properties["fullName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "configuration"))) { #optional property not found
            $Configuration = $null
        } else {
            $Configuration = $JsonParameters.PSobject.Properties["configuration"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "author"))) { #optional property not found
            $Author = $null
        } else {
            $Author = $JsonParameters.PSobject.Properties["author"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "authorUrl"))) { #optional property not found
            $AuthorUrl = $null
        } else {
            $AuthorUrl = $JsonParameters.PSobject.Properties["authorUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "license"))) { #optional property not found
            $License = $null
        } else {
            $License = $JsonParameters.PSobject.Properties["license"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requireLicenseAcceptance"))) { #optional property not found
            $RequireLicenseAcceptance = $null
        } else {
            $RequireLicenseAcceptance = $JsonParameters.PSobject.Properties["requireLicenseAcceptance"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "repository"))) { #optional property not found
            $Repository = $null
        } else {
            $Repository = $JsonParameters.PSobject.Properties["repository"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "path"))) { #optional property not found
            $Path = $null
        } else {
            $Path = $JsonParameters.PSobject.Properties["path"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "icon"))) { #optional property not found
            $Icon = $null
        } else {
            $Icon = $JsonParameters.PSobject.Properties["icon"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "image"))) { #optional property not found
            $Image = $null
        } else {
            $Image = $JsonParameters.PSobject.Properties["image"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nuSpecPath"))) { #optional property not found
            $NuSpecPath = $null
        } else {
            $NuSpecPath = $JsonParameters.PSobject.Properties["nuSpecPath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "manifest"))) { #optional property not found
            $Manifest = $null
        } else {
            $Manifest = $JsonParameters.PSobject.Properties["manifest"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "documentation"))) { #optional property not found
            $Documentation = $null
        } else {
            $Documentation = $JsonParameters.PSobject.Properties["documentation"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "website"))) { #optional property not found
            $Website = $null
        } else {
            $Website = $JsonParameters.PSobject.Properties["website"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "logo"))) { #optional property not found
            $Logo = $null
        } else {
            $Logo = $JsonParameters.PSobject.Properties["logo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "swaggerSpec"))) { #optional property not found
            $SwaggerSpec = $null
        } else {
            $SwaggerSpec = $JsonParameters.PSobject.Properties["swaggerSpec"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "swaggerSpecs"))) { #optional property not found
            $SwaggerSpecs = $null
        } else {
            $SwaggerSpecs = $JsonParameters.PSobject.Properties["swaggerSpecs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) { #optional property not found
            $Url = $null
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assemblyPaths"))) { #optional property not found
            $AssemblyPaths = $null
        } else {
            $AssemblyPaths = $JsonParameters.PSobject.Properties["assemblyPaths"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "markedForDeletion"))) { #optional property not found
            $MarkedForDeletion = $null
        } else {
            $MarkedForDeletion = $JsonParameters.PSobject.Properties["markedForDeletion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "version"))) { #optional property not found
            $Version = $null
        } else {
            $Version = $JsonParameters.PSobject.Properties["version"].value
        }

        $PSO = [PSCustomObject]@{
            "enable" = ${Enable}
            "active" = ${Active}
            "order" = ${Order}
            "id" = ${Id}
            "name" = ${Name}
            "fullName" = ${FullName}
            "description" = ${Description}
            "type" = ${Type}
            "configuration" = ${Configuration}
            "author" = ${Author}
            "authorUrl" = ${AuthorUrl}
            "license" = ${License}
            "requireLicenseAcceptance" = ${RequireLicenseAcceptance}
            "repository" = ${Repository}
            "path" = ${Path}
            "icon" = ${Icon}
            "image" = ${Image}
            "nuSpecPath" = ${NuSpecPath}
            "manifest" = ${Manifest}
            "documentation" = ${Documentation}
            "website" = ${Website}
            "logo" = ${Logo}
            "swaggerSpec" = ${SwaggerSpec}
            "swaggerSpecs" = ${SwaggerSpecs}
            "url" = ${Url}
            "assemblyPaths" = ${AssemblyPaths}
            "markedForDeletion" = ${MarkedForDeletion}
            "version" = ${Version}
        }

        return $PSO
    }

}

