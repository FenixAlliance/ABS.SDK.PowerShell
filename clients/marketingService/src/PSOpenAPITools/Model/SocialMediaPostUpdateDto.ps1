#
# MarketingService
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 2.0.1.4089
# Contact: support@fenix-alliance.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Title
No description available.
.PARAMETER Content
No description available.
.PARAMETER FeaturedImageUrl
No description available.
.PARAMETER TenantId
No description available.
.PARAMETER SocialPostBucketId
No description available.
.PARAMETER EnrolmentId
No description available.
.OUTPUTS

SocialMediaPostUpdateDto<PSCustomObject>
#>

function Initialize-SocialMediaPostUpdateDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Content},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FeaturedImageUrl},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TenantId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SocialPostBucketId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EnrolmentId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SocialMediaPostUpdateDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Title -and $Title.length -gt 99) {
            throw "invalid value for 'Title', the character length must be smaller than or equal to 99."
        }

        if (!$Title -and $Title.length -lt 0) {
            throw "invalid value for 'Title', the character length must be great than or equal to 0."
        }

        if (!$TenantId -and $TenantId.length -gt 36) {
            throw "invalid value for 'TenantId', the character length must be smaller than or equal to 36."
        }

        if (!$TenantId -and $TenantId.length -lt 0) {
            throw "invalid value for 'TenantId', the character length must be great than or equal to 0."
        }

        if (!$SocialPostBucketId -and $SocialPostBucketId.length -gt 36) {
            throw "invalid value for 'SocialPostBucketId', the character length must be smaller than or equal to 36."
        }

        if (!$SocialPostBucketId -and $SocialPostBucketId.length -lt 0) {
            throw "invalid value for 'SocialPostBucketId', the character length must be great than or equal to 0."
        }

        if (!$EnrolmentId -and $EnrolmentId.length -gt 36) {
            throw "invalid value for 'EnrolmentId', the character length must be smaller than or equal to 36."
        }

        if (!$EnrolmentId -and $EnrolmentId.length -lt 0) {
            throw "invalid value for 'EnrolmentId', the character length must be great than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "title" = ${Title}
            "content" = ${Content}
            "featuredImageUrl" = ${FeaturedImageUrl}
            "tenantId" = ${TenantId}
            "socialPostBucketId" = ${SocialPostBucketId}
            "enrolmentId" = ${EnrolmentId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SocialMediaPostUpdateDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to SocialMediaPostUpdateDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SocialMediaPostUpdateDto<PSCustomObject>
#>
function ConvertFrom-JsonToSocialMediaPostUpdateDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SocialMediaPostUpdateDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SocialMediaPostUpdateDto
        $AllProperties = ("title", "content", "featuredImageUrl", "tenantId", "socialPostBucketId", "enrolmentId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title"))) { #optional property not found
            $Title = $null
        } else {
            $Title = $JsonParameters.PSobject.Properties["title"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "content"))) { #optional property not found
            $Content = $null
        } else {
            $Content = $JsonParameters.PSobject.Properties["content"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "featuredImageUrl"))) { #optional property not found
            $FeaturedImageUrl = $null
        } else {
            $FeaturedImageUrl = $JsonParameters.PSobject.Properties["featuredImageUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenantId"))) { #optional property not found
            $TenantId = $null
        } else {
            $TenantId = $JsonParameters.PSobject.Properties["tenantId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "socialPostBucketId"))) { #optional property not found
            $SocialPostBucketId = $null
        } else {
            $SocialPostBucketId = $JsonParameters.PSobject.Properties["socialPostBucketId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enrolmentId"))) { #optional property not found
            $EnrolmentId = $null
        } else {
            $EnrolmentId = $JsonParameters.PSobject.Properties["enrolmentId"].value
        }

        $PSO = [PSCustomObject]@{
            "title" = ${Title}
            "content" = ${Content}
            "featuredImageUrl" = ${FeaturedImageUrl}
            "tenantId" = ${TenantId}
            "socialPostBucketId" = ${SocialPostBucketId}
            "enrolmentId" = ${EnrolmentId}
        }

        return $PSO
    }

}

