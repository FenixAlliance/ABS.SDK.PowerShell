#
# StorageService
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 2.0.1.4089
# Contact: support@fenix-alliance.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Kind
No description available.
.PARAMETER IsFolder
No description available.
.PARAMETER IsFile
No description available.
.PARAMETER FolderPath
No description available.
.PARAMETER Name
No description available.
.PARAMETER Size
No description available.
.PARAMETER Md5
No description available.
.PARAMETER CreatedTime
No description available.
.PARAMETER LastModificationTime
No description available.
.PARAMETER FullPath
No description available.
.PARAMETER Properties
No description available.
.PARAMETER Metadata
No description available.
.PARAMETER IsRootFolder
No description available.
.OUTPUTS

Blob<PSCustomObject>
#>

function Initialize-Blob {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("0", "1")]
        [System.Nullable[Int32]]
        ${Kind},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsFolder},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsFile},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FolderPath},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${Size},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Md5},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${CreatedTime},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastModificationTime},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FullPath},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Properties},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${Metadata},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsRootFolder}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Blob' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "kind" = ${Kind}
            "isFolder" = ${IsFolder}
            "isFile" = ${IsFile}
            "folderPath" = ${FolderPath}
            "name" = ${Name}
            "size" = ${Size}
            "md5" = ${Md5}
            "createdTime" = ${CreatedTime}
            "lastModificationTime" = ${LastModificationTime}
            "fullPath" = ${FullPath}
            "properties" = ${Properties}
            "metadata" = ${Metadata}
            "isRootFolder" = ${IsRootFolder}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Blob<PSCustomObject>

.DESCRIPTION

Convert from JSON to Blob<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Blob<PSCustomObject>
#>
function ConvertFrom-JsonToBlob {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Blob' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Blob
        $AllProperties = ("kind", "isFolder", "isFile", "folderPath", "name", "size", "md5", "createdTime", "lastModificationTime", "fullPath", "properties", "metadata", "isRootFolder")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "kind"))) { #optional property not found
            $Kind = $null
        } else {
            $Kind = $JsonParameters.PSobject.Properties["kind"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isFolder"))) { #optional property not found
            $IsFolder = $null
        } else {
            $IsFolder = $JsonParameters.PSobject.Properties["isFolder"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isFile"))) { #optional property not found
            $IsFile = $null
        } else {
            $IsFile = $JsonParameters.PSobject.Properties["isFile"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "folderPath"))) { #optional property not found
            $FolderPath = $null
        } else {
            $FolderPath = $JsonParameters.PSobject.Properties["folderPath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size"))) { #optional property not found
            $Size = $null
        } else {
            $Size = $JsonParameters.PSobject.Properties["size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "md5"))) { #optional property not found
            $Md5 = $null
        } else {
            $Md5 = $JsonParameters.PSobject.Properties["md5"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "createdTime"))) { #optional property not found
            $CreatedTime = $null
        } else {
            $CreatedTime = $JsonParameters.PSobject.Properties["createdTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastModificationTime"))) { #optional property not found
            $LastModificationTime = $null
        } else {
            $LastModificationTime = $JsonParameters.PSobject.Properties["lastModificationTime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fullPath"))) { #optional property not found
            $FullPath = $null
        } else {
            $FullPath = $JsonParameters.PSobject.Properties["fullPath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "properties"))) { #optional property not found
            $Properties = $null
        } else {
            $Properties = $JsonParameters.PSobject.Properties["properties"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metadata"))) { #optional property not found
            $Metadata = $null
        } else {
            $Metadata = $JsonParameters.PSobject.Properties["metadata"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isRootFolder"))) { #optional property not found
            $IsRootFolder = $null
        } else {
            $IsRootFolder = $JsonParameters.PSobject.Properties["isRootFolder"].value
        }

        $PSO = [PSCustomObject]@{
            "kind" = ${Kind}
            "isFolder" = ${IsFolder}
            "isFile" = ${IsFile}
            "folderPath" = ${FolderPath}
            "name" = ${Name}
            "size" = ${Size}
            "md5" = ${Md5}
            "createdTime" = ${CreatedTime}
            "lastModificationTime" = ${LastModificationTime}
            "fullPath" = ${FullPath}
            "properties" = ${Properties}
            "metadata" = ${Metadata}
            "isRootFolder" = ${IsRootFolder}
        }

        return $PSO
    }

}

