#
# TimeTrackerService
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 2.0.1.4089
# Contact: support@fenix-alliance.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Timestamp
No description available.
.PARAMETER RequesterContactID
No description available.
.PARAMETER ApproverContactID
No description available.
.PARAMETER ProjectPeriodID
No description available.
.PARAMETER Comments
No description available.
.OUTPUTS

ProjectHoursApprovalCreateDto<PSCustomObject>
#>

function Initialize-ProjectHoursApprovalCreateDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequesterContactID},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ApproverContactID},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProjectPeriodID},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comments}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ProjectHoursApprovalCreateDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "timestamp" = ${Timestamp}
            "requesterContactID" = ${RequesterContactID}
            "approverContactID" = ${ApproverContactID}
            "projectPeriodID" = ${ProjectPeriodID}
            "comments" = ${Comments}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProjectHoursApprovalCreateDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProjectHoursApprovalCreateDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProjectHoursApprovalCreateDto<PSCustomObject>
#>
function ConvertFrom-JsonToProjectHoursApprovalCreateDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ProjectHoursApprovalCreateDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ProjectHoursApprovalCreateDto
        $AllProperties = ("id", "timestamp", "requesterContactID", "approverContactID", "projectPeriodID", "comments")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "requesterContactID"))) { #optional property not found
            $RequesterContactID = $null
        } else {
            $RequesterContactID = $JsonParameters.PSobject.Properties["requesterContactID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "approverContactID"))) { #optional property not found
            $ApproverContactID = $null
        } else {
            $ApproverContactID = $JsonParameters.PSobject.Properties["approverContactID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "projectPeriodID"))) { #optional property not found
            $ProjectPeriodID = $null
        } else {
            $ProjectPeriodID = $JsonParameters.PSobject.Properties["projectPeriodID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comments"))) { #optional property not found
            $Comments = $null
        } else {
            $Comments = $JsonParameters.PSobject.Properties["comments"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "timestamp" = ${Timestamp}
            "requesterContactID" = ${RequesterContactID}
            "approverContactID" = ${ApproverContactID}
            "projectPeriodID" = ${ProjectPeriodID}
            "comments" = ${Comments}
        }

        return $PSO
    }

}

