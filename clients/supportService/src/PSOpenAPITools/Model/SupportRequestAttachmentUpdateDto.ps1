#
# SupportService
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 2.0.1.4089
# Contact: support@fenix-alliance.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Notes
No description available.
.PARAMETER Metadata
No description available.
.PARAMETER Title
No description available.
.PARAMETER Author
No description available.
.PARAMETER IsFolder
No description available.
.PARAMETER FileName
No description available.
.PARAMETER Abstract
No description available.
.PARAMETER KeyWords
No description available.
.PARAMETER ValidResponse
No description available.
.PARAMETER ParentFileUploadID
No description available.
.PARAMETER FilePath
No description available.
.PARAMETER File
No description available.
.PARAMETER ContentType
No description available.
.PARAMETER FileLength
No description available.
.OUTPUTS

SupportRequestAttachmentUpdateDto<PSCustomObject>
#>

function Initialize-SupportRequestAttachmentUpdateDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Notes},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Metadata},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Author},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsFolder},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FileName},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Abstract},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${KeyWords},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ValidResponse},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ParentFileUploadID},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FilePath},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.IO.FileInfo]
        ${File},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ContentType},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${FileLength}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SupportRequestAttachmentUpdateDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "notes" = ${Notes}
            "metadata" = ${Metadata}
            "title" = ${Title}
            "author" = ${Author}
            "isFolder" = ${IsFolder}
            "fileName" = ${FileName}
            "abstract" = ${Abstract}
            "keyWords" = ${KeyWords}
            "validResponse" = ${ValidResponse}
            "parentFileUploadID" = ${ParentFileUploadID}
            "filePath" = ${FilePath}
            "file" = ${File}
            "contentType" = ${ContentType}
            "fileLength" = ${FileLength}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SupportRequestAttachmentUpdateDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to SupportRequestAttachmentUpdateDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SupportRequestAttachmentUpdateDto<PSCustomObject>
#>
function ConvertFrom-JsonToSupportRequestAttachmentUpdateDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SupportRequestAttachmentUpdateDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SupportRequestAttachmentUpdateDto
        $AllProperties = ("notes", "metadata", "title", "author", "isFolder", "fileName", "abstract", "keyWords", "validResponse", "parentFileUploadID", "filePath", "file", "contentType", "fileLength")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "notes"))) { #optional property not found
            $Notes = $null
        } else {
            $Notes = $JsonParameters.PSobject.Properties["notes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metadata"))) { #optional property not found
            $Metadata = $null
        } else {
            $Metadata = $JsonParameters.PSobject.Properties["metadata"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title"))) { #optional property not found
            $Title = $null
        } else {
            $Title = $JsonParameters.PSobject.Properties["title"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "author"))) { #optional property not found
            $Author = $null
        } else {
            $Author = $JsonParameters.PSobject.Properties["author"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isFolder"))) { #optional property not found
            $IsFolder = $null
        } else {
            $IsFolder = $JsonParameters.PSobject.Properties["isFolder"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fileName"))) { #optional property not found
            $FileName = $null
        } else {
            $FileName = $JsonParameters.PSobject.Properties["fileName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "abstract"))) { #optional property not found
            $Abstract = $null
        } else {
            $Abstract = $JsonParameters.PSobject.Properties["abstract"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "keyWords"))) { #optional property not found
            $KeyWords = $null
        } else {
            $KeyWords = $JsonParameters.PSobject.Properties["keyWords"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "validResponse"))) { #optional property not found
            $ValidResponse = $null
        } else {
            $ValidResponse = $JsonParameters.PSobject.Properties["validResponse"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parentFileUploadID"))) { #optional property not found
            $ParentFileUploadID = $null
        } else {
            $ParentFileUploadID = $JsonParameters.PSobject.Properties["parentFileUploadID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "filePath"))) { #optional property not found
            $FilePath = $null
        } else {
            $FilePath = $JsonParameters.PSobject.Properties["filePath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "file"))) { #optional property not found
            $File = $null
        } else {
            $File = $JsonParameters.PSobject.Properties["file"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contentType"))) { #optional property not found
            $ContentType = $null
        } else {
            $ContentType = $JsonParameters.PSobject.Properties["contentType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fileLength"))) { #optional property not found
            $FileLength = $null
        } else {
            $FileLength = $JsonParameters.PSobject.Properties["fileLength"].value
        }

        $PSO = [PSCustomObject]@{
            "notes" = ${Notes}
            "metadata" = ${Metadata}
            "title" = ${Title}
            "author" = ${Author}
            "isFolder" = ${IsFolder}
            "fileName" = ${FileName}
            "abstract" = ${Abstract}
            "keyWords" = ${KeyWords}
            "validResponse" = ${ValidResponse}
            "parentFileUploadID" = ${ParentFileUploadID}
            "filePath" = ${FilePath}
            "file" = ${File}
            "contentType" = ${ContentType}
            "fileLength" = ${FileLength}
        }

        return $PSO
    }

}

