#
# SystemService
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 2.0.1.4089
# Contact: support@fenix-alliance.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER UserId
No description available.
.PARAMETER TenantId
No description available.
.PARAMETER OrderId
No description available.
.PARAMETER PaymentId
No description available.
.PARAMETER InvoiceId
No description available.
.PARAMETER EnrollmentId
No description available.
.PARAMETER EntitlementId
No description available.
.PARAMETER Seats
No description available.
.PARAMETER LicenseType
No description available.
.PARAMETER ExpirationDate
No description available.
.PARAMETER Features
No description available.
.PARAMETER AdditionalAttributes
No description available.
.OUTPUTS

LicenseKeyRequest<PSCustomObject>
#>

function Initialize-LicenseKeyRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TenantId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OrderId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PaymentId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InvoiceId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EnrollmentId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EntitlementId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Seats},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("1", "2", "3")]
        [System.Nullable[Int32]]
        ${LicenseType},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ExpirationDate},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Features},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AdditionalAttributes}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => LicenseKeyRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "userId" = ${UserId}
            "tenantId" = ${TenantId}
            "orderId" = ${OrderId}
            "paymentId" = ${PaymentId}
            "invoiceId" = ${InvoiceId}
            "enrollmentId" = ${EnrollmentId}
            "entitlementId" = ${EntitlementId}
            "seats" = ${Seats}
            "licenseType" = ${LicenseType}
            "expirationDate" = ${ExpirationDate}
            "features" = ${Features}
            "additionalAttributes" = ${AdditionalAttributes}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to LicenseKeyRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to LicenseKeyRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

LicenseKeyRequest<PSCustomObject>
#>
function ConvertFrom-JsonToLicenseKeyRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => LicenseKeyRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in LicenseKeyRequest
        $AllProperties = ("userId", "tenantId", "orderId", "paymentId", "invoiceId", "enrollmentId", "entitlementId", "seats", "licenseType", "expirationDate", "features", "additionalAttributes")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userId"))) { #optional property not found
            $UserId = $null
        } else {
            $UserId = $JsonParameters.PSobject.Properties["userId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenantId"))) { #optional property not found
            $TenantId = $null
        } else {
            $TenantId = $JsonParameters.PSobject.Properties["tenantId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "orderId"))) { #optional property not found
            $OrderId = $null
        } else {
            $OrderId = $JsonParameters.PSobject.Properties["orderId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "paymentId"))) { #optional property not found
            $PaymentId = $null
        } else {
            $PaymentId = $JsonParameters.PSobject.Properties["paymentId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "invoiceId"))) { #optional property not found
            $InvoiceId = $null
        } else {
            $InvoiceId = $JsonParameters.PSobject.Properties["invoiceId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enrollmentId"))) { #optional property not found
            $EnrollmentId = $null
        } else {
            $EnrollmentId = $JsonParameters.PSobject.Properties["enrollmentId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "entitlementId"))) { #optional property not found
            $EntitlementId = $null
        } else {
            $EntitlementId = $JsonParameters.PSobject.Properties["entitlementId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "seats"))) { #optional property not found
            $Seats = $null
        } else {
            $Seats = $JsonParameters.PSobject.Properties["seats"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "licenseType"))) { #optional property not found
            $LicenseType = $null
        } else {
            $LicenseType = $JsonParameters.PSobject.Properties["licenseType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expirationDate"))) { #optional property not found
            $ExpirationDate = $null
        } else {
            $ExpirationDate = $JsonParameters.PSobject.Properties["expirationDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "features"))) { #optional property not found
            $Features = $null
        } else {
            $Features = $JsonParameters.PSobject.Properties["features"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "additionalAttributes"))) { #optional property not found
            $AdditionalAttributes = $null
        } else {
            $AdditionalAttributes = $JsonParameters.PSobject.Properties["additionalAttributes"].value
        }

        $PSO = [PSCustomObject]@{
            "userId" = ${UserId}
            "tenantId" = ${TenantId}
            "orderId" = ${OrderId}
            "paymentId" = ${PaymentId}
            "invoiceId" = ${InvoiceId}
            "enrollmentId" = ${EnrollmentId}
            "entitlementId" = ${EntitlementId}
            "seats" = ${Seats}
            "licenseType" = ${LicenseType}
            "expirationDate" = ${ExpirationDate}
            "features" = ${Features}
            "additionalAttributes" = ${AdditionalAttributes}
        }

        return $PSO
    }

}

