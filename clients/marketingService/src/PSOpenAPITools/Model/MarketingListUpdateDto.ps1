#
# MarketingService
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 2.0.1.4089
# Contact: support@fenix-alliance.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Locked
No description available.
.PARAMETER Name
No description available.
.PARAMETER Purpose
No description available.
.PARAMETER Description
No description available.
.PARAMETER Source
No description available.
.PARAMETER Cost
No description available.
.PARAMETER ModifiedOn
No description available.
.PARAMETER LastUsedOn
No description available.
.PARAMETER CurrencyId
No description available.
.PARAMETER TenantId
No description available.
.PARAMETER EnrolmentId
No description available.
.PARAMETER MarketingListType
No description available.
.PARAMETER MarketingListTarget
No description available.
.OUTPUTS

MarketingListUpdateDto<PSCustomObject>
#>

function Initialize-MarketingListUpdateDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Locked},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Purpose},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Source},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Cost},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ModifiedOn},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUsedOn},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CurrencyId},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TenantId},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EnrolmentId},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("0", "1")]
        [System.Nullable[Int32]]
        ${MarketingListType},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("0", "1", "2")]
        [System.Nullable[Int32]]
        ${MarketingListTarget}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => MarketingListUpdateDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "locked" = ${Locked}
            "name" = ${Name}
            "purpose" = ${Purpose}
            "description" = ${Description}
            "source" = ${Source}
            "cost" = ${Cost}
            "modifiedOn" = ${ModifiedOn}
            "lastUsedOn" = ${LastUsedOn}
            "currencyId" = ${CurrencyId}
            "tenantId" = ${TenantId}
            "enrolmentId" = ${EnrolmentId}
            "marketingListType" = ${MarketingListType}
            "marketingListTarget" = ${MarketingListTarget}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to MarketingListUpdateDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to MarketingListUpdateDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

MarketingListUpdateDto<PSCustomObject>
#>
function ConvertFrom-JsonToMarketingListUpdateDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => MarketingListUpdateDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in MarketingListUpdateDto
        $AllProperties = ("locked", "name", "purpose", "description", "source", "cost", "modifiedOn", "lastUsedOn", "currencyId", "tenantId", "enrolmentId", "marketingListType", "marketingListTarget")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "locked"))) { #optional property not found
            $Locked = $null
        } else {
            $Locked = $JsonParameters.PSobject.Properties["locked"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "purpose"))) { #optional property not found
            $Purpose = $null
        } else {
            $Purpose = $JsonParameters.PSobject.Properties["purpose"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "source"))) { #optional property not found
            $Source = $null
        } else {
            $Source = $JsonParameters.PSobject.Properties["source"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cost"))) { #optional property not found
            $Cost = $null
        } else {
            $Cost = $JsonParameters.PSobject.Properties["cost"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "modifiedOn"))) { #optional property not found
            $ModifiedOn = $null
        } else {
            $ModifiedOn = $JsonParameters.PSobject.Properties["modifiedOn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lastUsedOn"))) { #optional property not found
            $LastUsedOn = $null
        } else {
            $LastUsedOn = $JsonParameters.PSobject.Properties["lastUsedOn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "currencyId"))) { #optional property not found
            $CurrencyId = $null
        } else {
            $CurrencyId = $JsonParameters.PSobject.Properties["currencyId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenantId"))) { #optional property not found
            $TenantId = $null
        } else {
            $TenantId = $JsonParameters.PSobject.Properties["tenantId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enrolmentId"))) { #optional property not found
            $EnrolmentId = $null
        } else {
            $EnrolmentId = $JsonParameters.PSobject.Properties["enrolmentId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "marketingListType"))) { #optional property not found
            $MarketingListType = $null
        } else {
            $MarketingListType = $JsonParameters.PSobject.Properties["marketingListType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "marketingListTarget"))) { #optional property not found
            $MarketingListTarget = $null
        } else {
            $MarketingListTarget = $JsonParameters.PSobject.Properties["marketingListTarget"].value
        }

        $PSO = [PSCustomObject]@{
            "locked" = ${Locked}
            "name" = ${Name}
            "purpose" = ${Purpose}
            "description" = ${Description}
            "source" = ${Source}
            "cost" = ${Cost}
            "modifiedOn" = ${ModifiedOn}
            "lastUsedOn" = ${LastUsedOn}
            "currencyId" = ${CurrencyId}
            "tenantId" = ${TenantId}
            "enrolmentId" = ${EnrolmentId}
            "marketingListType" = ${MarketingListType}
            "marketingListTarget" = ${MarketingListTarget}
        }

        return $PSO
    }

}

