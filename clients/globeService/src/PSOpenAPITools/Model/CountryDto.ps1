#
# GlobeService
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 2.0.1.4089
# Contact: support@fenix-alliance.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Timestamp
No description available.
.PARAMETER Iso3
No description available.
.PARAMETER Iso2
No description available.
.PARAMETER Name
No description available.
.PARAMETER NativeName
No description available.
.PARAMETER FlagUrl
No description available.
.OUTPUTS

CountryDto<PSCustomObject>
#>

function Initialize-CountryDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Iso3},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Iso2},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NativeName},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FlagUrl}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CountryDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "timestamp" = ${Timestamp}
            "iso3" = ${Iso3}
            "iso2" = ${Iso2}
            "name" = ${Name}
            "nativeName" = ${NativeName}
            "flagUrl" = ${FlagUrl}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CountryDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to CountryDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CountryDto<PSCustomObject>
#>
function ConvertFrom-JsonToCountryDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CountryDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CountryDto
        $AllProperties = ("id", "timestamp", "iso3", "iso2", "name", "nativeName", "flagUrl")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iso3"))) { #optional property not found
            $Iso3 = $null
        } else {
            $Iso3 = $JsonParameters.PSobject.Properties["iso3"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iso2"))) { #optional property not found
            $Iso2 = $null
        } else {
            $Iso2 = $JsonParameters.PSobject.Properties["iso2"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nativeName"))) { #optional property not found
            $NativeName = $null
        } else {
            $NativeName = $JsonParameters.PSobject.Properties["nativeName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "flagUrl"))) { #optional property not found
            $FlagUrl = $null
        } else {
            $FlagUrl = $JsonParameters.PSobject.Properties["flagUrl"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "timestamp" = ${Timestamp}
            "iso3" = ${Iso3}
            "iso2" = ${Iso2}
            "name" = ${Name}
            "nativeName" = ${NativeName}
            "flagUrl" = ${FlagUrl}
        }

        return $PSO
    }

}

