#
# ForexService
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 2.0.1.4089
# Contact: support@fenix-alliance.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Source
No description available.
.PARAMETER Target
No description available.
.PARAMETER Rate
No description available.
.OUTPUTS

ExchangeRate<PSCustomObject>
#>

function Initialize-ExchangeRate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Source},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Target},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Rate}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ExchangeRate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "source" = ${Source}
            "target" = ${Target}
            "rate" = ${Rate}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ExchangeRate<PSCustomObject>

.DESCRIPTION

Convert from JSON to ExchangeRate<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ExchangeRate<PSCustomObject>
#>
function ConvertFrom-JsonToExchangeRate {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ExchangeRate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ExchangeRate
        $AllProperties = ("source", "target", "rate")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "source"))) { #optional property not found
            $Source = $null
        } else {
            $Source = $JsonParameters.PSobject.Properties["source"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "target"))) { #optional property not found
            $Target = $null
        } else {
            $Target = $JsonParameters.PSobject.Properties["target"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rate"))) { #optional property not found
            $Rate = $null
        } else {
            $Rate = $JsonParameters.PSobject.Properties["rate"].value
        }

        $PSO = [PSCustomObject]@{
            "source" = ${Source}
            "target" = ${Target}
            "rate" = ${Rate}
        }

        return $PSO
    }

}

