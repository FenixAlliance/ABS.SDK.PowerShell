#
# GlobeService
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 2.0.1.4089
# Contact: support@fenix-alliance.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Timestamp
No description available.
.PARAMETER Iso6391
No description available.
.PARAMETER Iso6392
No description available.
.PARAMETER Enabled
No description available.
.PARAMETER Name
No description available.
.PARAMETER LanguageNativeName
No description available.
.OUTPUTS

CountryLanguageDto<PSCustomObject>
#>

function Initialize-CountryLanguageDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Iso6391},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Iso6392},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LanguageNativeName}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CountryLanguageDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "timestamp" = ${Timestamp}
            "iso639_1" = ${Iso6391}
            "iso639_2" = ${Iso6392}
            "enabled" = ${Enabled}
            "name" = ${Name}
            "languageNativeName" = ${LanguageNativeName}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CountryLanguageDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to CountryLanguageDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CountryLanguageDto<PSCustomObject>
#>
function ConvertFrom-JsonToCountryLanguageDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CountryLanguageDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CountryLanguageDto
        $AllProperties = ("id", "timestamp", "iso639_1", "iso639_2", "enabled", "name", "languageNativeName")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iso639_1"))) { #optional property not found
            $Iso6391 = $null
        } else {
            $Iso6391 = $JsonParameters.PSobject.Properties["iso639_1"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iso639_2"))) { #optional property not found
            $Iso6392 = $null
        } else {
            $Iso6392 = $JsonParameters.PSobject.Properties["iso639_2"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "languageNativeName"))) { #optional property not found
            $LanguageNativeName = $null
        } else {
            $LanguageNativeName = $JsonParameters.PSobject.Properties["languageNativeName"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "timestamp" = ${Timestamp}
            "iso639_1" = ${Iso6391}
            "iso639_2" = ${Iso6392}
            "enabled" = ${Enabled}
            "name" = ${Name}
            "languageNativeName" = ${LanguageNativeName}
        }

        return $PSO
    }

}

