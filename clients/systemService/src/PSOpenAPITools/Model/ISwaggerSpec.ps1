#
# SystemService
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 2.0.1.4089
# Contact: support@fenix-alliance.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Enable
No description available.
.PARAMETER Name
No description available.
.PARAMETER Title
No description available.
.PARAMETER Version
No description available.
.PARAMETER Description
No description available.
.PARAMETER TermsOfService
No description available.
.PARAMETER SwaggerEndpoint
No description available.
.PARAMETER OpenApiContact
No description available.
.PARAMETER License
No description available.
.OUTPUTS

ISwaggerSpec<PSCustomObject>
#>

function Initialize-ISwaggerSpec {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enable},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Version},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TermsOfService},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${SwaggerEndpoint},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${OpenApiContact},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${License}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ISwaggerSpec' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "enable" = ${Enable}
            "name" = ${Name}
            "title" = ${Title}
            "version" = ${Version}
            "description" = ${Description}
            "termsOfService" = ${TermsOfService}
            "swaggerEndpoint" = ${SwaggerEndpoint}
            "openApiContact" = ${OpenApiContact}
            "license" = ${License}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ISwaggerSpec<PSCustomObject>

.DESCRIPTION

Convert from JSON to ISwaggerSpec<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ISwaggerSpec<PSCustomObject>
#>
function ConvertFrom-JsonToISwaggerSpec {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ISwaggerSpec' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ISwaggerSpec
        $AllProperties = ("enable", "name", "title", "version", "description", "termsOfService", "swaggerEndpoint", "openApiContact", "license")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enable"))) { #optional property not found
            $Enable = $null
        } else {
            $Enable = $JsonParameters.PSobject.Properties["enable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title"))) { #optional property not found
            $Title = $null
        } else {
            $Title = $JsonParameters.PSobject.Properties["title"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "version"))) { #optional property not found
            $Version = $null
        } else {
            $Version = $JsonParameters.PSobject.Properties["version"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "termsOfService"))) { #optional property not found
            $TermsOfService = $null
        } else {
            $TermsOfService = $JsonParameters.PSobject.Properties["termsOfService"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "swaggerEndpoint"))) { #optional property not found
            $SwaggerEndpoint = $null
        } else {
            $SwaggerEndpoint = $JsonParameters.PSobject.Properties["swaggerEndpoint"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "openApiContact"))) { #optional property not found
            $OpenApiContact = $null
        } else {
            $OpenApiContact = $JsonParameters.PSobject.Properties["openApiContact"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "license"))) { #optional property not found
            $License = $null
        } else {
            $License = $JsonParameters.PSobject.Properties["license"].value
        }

        $PSO = [PSCustomObject]@{
            "enable" = ${Enable}
            "name" = ${Name}
            "title" = ${Title}
            "version" = ${Version}
            "description" = ${Description}
            "termsOfService" = ${TermsOfService}
            "swaggerEndpoint" = ${SwaggerEndpoint}
            "openApiContact" = ${OpenApiContact}
            "license" = ${License}
        }

        return $PSO
    }

}

