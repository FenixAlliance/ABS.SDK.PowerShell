#
# TimeTrackerService
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 2.0.1.4089
# Contact: support@fenix-alliance.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Timestamp
No description available.
.PARAMETER ProjectId
No description available.
.PARAMETER ProjectTaskId
No description available.
.PARAMETER TaskCategoryId
No description available.
.PARAMETER ProjectPeriodId
No description available.
.PARAMETER ResponsibleContactId
No description available.
.PARAMETER CreatorContactId
No description available.
.PARAMETER RecordType
No description available.
.PARAMETER TimeStamp
No description available.
.PARAMETER TimeSpan
No description available.
.PARAMETER LogDate
No description available.
.PARAMETER Comments
No description available.
.PARAMETER Type
No description available.
.OUTPUTS

ProjectTimeLogDto<PSCustomObject>
#>

function Initialize-ProjectTimeLogDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProjectId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProjectTaskId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TaskCategoryId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ProjectPeriodId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ResponsibleContactId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CreatorContactId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("0", "1", "2")]
        [System.Nullable[Int32]]
        ${RecordType},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${TimeStamp},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TimeSpan},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LogDate},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comments},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ProjectTimeLogDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "timestamp" = ${Timestamp}
            "projectId" = ${ProjectId}
            "projectTaskId" = ${ProjectTaskId}
            "taskCategoryId" = ${TaskCategoryId}
            "projectPeriodId" = ${ProjectPeriodId}
            "responsibleContactId" = ${ResponsibleContactId}
            "creatorContactId" = ${CreatorContactId}
            "recordType" = ${RecordType}
            "timeStamp" = ${TimeStamp}
            "timeSpan" = ${TimeSpan}
            "logDate" = ${LogDate}
            "comments" = ${Comments}
            "type" = ${Type}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProjectTimeLogDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProjectTimeLogDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProjectTimeLogDto<PSCustomObject>
#>
function ConvertFrom-JsonToProjectTimeLogDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ProjectTimeLogDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ProjectTimeLogDto
        $AllProperties = ("id", "timestamp", "projectId", "projectTaskId", "taskCategoryId", "projectPeriodId", "responsibleContactId", "creatorContactId", "recordType", "timeStamp", "timeSpan", "logDate", "comments", "type")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "projectId"))) { #optional property not found
            $ProjectId = $null
        } else {
            $ProjectId = $JsonParameters.PSobject.Properties["projectId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "projectTaskId"))) { #optional property not found
            $ProjectTaskId = $null
        } else {
            $ProjectTaskId = $JsonParameters.PSobject.Properties["projectTaskId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "taskCategoryId"))) { #optional property not found
            $TaskCategoryId = $null
        } else {
            $TaskCategoryId = $JsonParameters.PSobject.Properties["taskCategoryId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "projectPeriodId"))) { #optional property not found
            $ProjectPeriodId = $null
        } else {
            $ProjectPeriodId = $JsonParameters.PSobject.Properties["projectPeriodId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "responsibleContactId"))) { #optional property not found
            $ResponsibleContactId = $null
        } else {
            $ResponsibleContactId = $JsonParameters.PSobject.Properties["responsibleContactId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "creatorContactId"))) { #optional property not found
            $CreatorContactId = $null
        } else {
            $CreatorContactId = $JsonParameters.PSobject.Properties["creatorContactId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recordType"))) { #optional property not found
            $RecordType = $null
        } else {
            $RecordType = $JsonParameters.PSobject.Properties["recordType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timeStamp"))) { #optional property not found
            $TimeStamp = $null
        } else {
            $TimeStamp = $JsonParameters.PSobject.Properties["timeStamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timeSpan"))) { #optional property not found
            $TimeSpan = $null
        } else {
            $TimeSpan = $JsonParameters.PSobject.Properties["timeSpan"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "logDate"))) { #optional property not found
            $LogDate = $null
        } else {
            $LogDate = $JsonParameters.PSobject.Properties["logDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comments"))) { #optional property not found
            $Comments = $null
        } else {
            $Comments = $JsonParameters.PSobject.Properties["comments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "timestamp" = ${Timestamp}
            "projectId" = ${ProjectId}
            "projectTaskId" = ${ProjectTaskId}
            "taskCategoryId" = ${TaskCategoryId}
            "projectPeriodId" = ${ProjectPeriodId}
            "responsibleContactId" = ${ResponsibleContactId}
            "creatorContactId" = ${CreatorContactId}
            "recordType" = ${RecordType}
            "timeStamp" = ${TimeStamp}
            "timeSpan" = ${TimeSpan}
            "logDate" = ${LogDate}
            "comments" = ${Comments}
            "type" = ${Type}
        }

        return $PSO
    }

}

