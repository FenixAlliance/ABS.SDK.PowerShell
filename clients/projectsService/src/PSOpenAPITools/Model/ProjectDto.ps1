#
# ProjectsService
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 2.0.1.4089
# Contact: support@fenix-alliance.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Timestamp
No description available.
.PARAMETER Title
No description available.
.PARAMETER Description
No description available.
.PARAMETER ProjectStartDate
No description available.
.PARAMETER ProjectEndDate
No description available.
.OUTPUTS

ProjectDto<PSCustomObject>
#>

function Initialize-ProjectDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ProjectStartDate},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ProjectEndDate}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ProjectDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "timestamp" = ${Timestamp}
            "title" = ${Title}
            "description" = ${Description}
            "projectStartDate" = ${ProjectStartDate}
            "projectEndDate" = ${ProjectEndDate}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ProjectDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to ProjectDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ProjectDto<PSCustomObject>
#>
function ConvertFrom-JsonToProjectDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ProjectDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ProjectDto
        $AllProperties = ("id", "timestamp", "title", "description", "projectStartDate", "projectEndDate")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title"))) { #optional property not found
            $Title = $null
        } else {
            $Title = $JsonParameters.PSobject.Properties["title"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "projectStartDate"))) { #optional property not found
            $ProjectStartDate = $null
        } else {
            $ProjectStartDate = $JsonParameters.PSobject.Properties["projectStartDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "projectEndDate"))) { #optional property not found
            $ProjectEndDate = $null
        } else {
            $ProjectEndDate = $JsonParameters.PSobject.Properties["projectEndDate"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "timestamp" = ${Timestamp}
            "title" = ${Title}
            "description" = ${Description}
            "projectStartDate" = ${ProjectStartDate}
            "projectEndDate" = ${ProjectEndDate}
        }

        return $PSO
    }

}

