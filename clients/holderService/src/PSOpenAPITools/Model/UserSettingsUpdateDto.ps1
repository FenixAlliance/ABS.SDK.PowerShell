#
# HolderService
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 2.0.1.4089
# Contact: support@fenix-alliance.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PageSize
No description available.
.PARAMETER DateFormat
No description available.
.PARAMETER CurrencyFormat
No description available.
.PARAMETER DateTimeFormat
No description available.
.PARAMETER SiteTheme
No description available.
.OUTPUTS

UserSettingsUpdateDto<PSCustomObject>
#>

function Initialize-UserSettingsUpdateDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PageSize},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DateFormat},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CurrencyFormat},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DateTimeFormat},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("0", "1", "2")]
        [Int32]
        ${SiteTheme}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => UserSettingsUpdateDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($PageSize -and $PageSize -gt 1000) {
          throw "invalid value for 'PageSize', must be smaller than or equal to 1000."
        }

        if ($PageSize -and $PageSize -lt 0) {
          throw "invalid value for 'PageSize', must be greater than or equal to 0."
        }

        if ($null -eq $DateFormat) {
            throw "invalid value for 'DateFormat', 'DateFormat' cannot be null."
        }

        if ($DateFormat.length -lt 1) {
            throw "invalid value for 'DateFormat', the character length must be great than or equal to 1."
        }

        if ($null -eq $CurrencyFormat) {
            throw "invalid value for 'CurrencyFormat', 'CurrencyFormat' cannot be null."
        }

        if ($CurrencyFormat.length -lt 1) {
            throw "invalid value for 'CurrencyFormat', the character length must be great than or equal to 1."
        }

        if ($null -eq $DateTimeFormat) {
            throw "invalid value for 'DateTimeFormat', 'DateTimeFormat' cannot be null."
        }

        if ($DateTimeFormat.length -lt 1) {
            throw "invalid value for 'DateTimeFormat', the character length must be great than or equal to 1."
        }

        if ($null -eq $SiteTheme) {
            throw "invalid value for 'SiteTheme', 'SiteTheme' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "pageSize" = ${PageSize}
            "dateFormat" = ${DateFormat}
            "currencyFormat" = ${CurrencyFormat}
            "dateTimeFormat" = ${DateTimeFormat}
            "siteTheme" = ${SiteTheme}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to UserSettingsUpdateDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to UserSettingsUpdateDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

UserSettingsUpdateDto<PSCustomObject>
#>
function ConvertFrom-JsonToUserSettingsUpdateDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => UserSettingsUpdateDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in UserSettingsUpdateDto
        $AllProperties = ("pageSize", "dateFormat", "currencyFormat", "dateTimeFormat", "siteTheme")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'dateFormat' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateFormat"))) {
            throw "Error! JSON cannot be serialized due to the required property 'dateFormat' missing."
        } else {
            $DateFormat = $JsonParameters.PSobject.Properties["dateFormat"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "currencyFormat"))) {
            throw "Error! JSON cannot be serialized due to the required property 'currencyFormat' missing."
        } else {
            $CurrencyFormat = $JsonParameters.PSobject.Properties["currencyFormat"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateTimeFormat"))) {
            throw "Error! JSON cannot be serialized due to the required property 'dateTimeFormat' missing."
        } else {
            $DateTimeFormat = $JsonParameters.PSobject.Properties["dateTimeFormat"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "siteTheme"))) {
            throw "Error! JSON cannot be serialized due to the required property 'siteTheme' missing."
        } else {
            $SiteTheme = $JsonParameters.PSobject.Properties["siteTheme"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pageSize"))) { #optional property not found
            $PageSize = $null
        } else {
            $PageSize = $JsonParameters.PSobject.Properties["pageSize"].value
        }

        $PSO = [PSCustomObject]@{
            "pageSize" = ${PageSize}
            "dateFormat" = ${DateFormat}
            "currencyFormat" = ${CurrencyFormat}
            "dateTimeFormat" = ${DateTimeFormat}
            "siteTheme" = ${SiteTheme}
        }

        return $PSO
    }

}

