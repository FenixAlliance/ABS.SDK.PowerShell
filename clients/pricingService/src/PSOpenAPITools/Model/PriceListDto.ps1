#
# PricingService
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 2.0.1.4089
# Contact: support@fenix-alliance.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Timestamp
No description available.
.PARAMETER Name
No description available.
.PARAMETER StartDate
No description available.
.PARAMETER EndDate
No description available.
.PARAMETER Description
No description available.
.PARAMETER CurrencyId
No description available.
.PARAMETER TenantId
No description available.
.PARAMETER UnitId
No description available.
.PARAMETER UnitGroupId
No description available.
.PARAMETER PartnerVisible
No description available.
.PARAMETER UnitOfMeasureDependant
No description available.
.PARAMETER EnrolmentId
No description available.
.OUTPUTS

PriceListDto<PSCustomObject>
#>

function Initialize-PriceListDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${StartDate},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${EndDate},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CurrencyId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TenantId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UnitId},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UnitGroupId},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${PartnerVisible},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${UnitOfMeasureDependant},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EnrolmentId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PriceListDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "timestamp" = ${Timestamp}
            "name" = ${Name}
            "startDate" = ${StartDate}
            "endDate" = ${EndDate}
            "description" = ${Description}
            "currencyId" = ${CurrencyId}
            "tenantId" = ${TenantId}
            "unitId" = ${UnitId}
            "unitGroupId" = ${UnitGroupId}
            "partnerVisible" = ${PartnerVisible}
            "unitOfMeasureDependant" = ${UnitOfMeasureDependant}
            "enrolmentId" = ${EnrolmentId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PriceListDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to PriceListDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PriceListDto<PSCustomObject>
#>
function ConvertFrom-JsonToPriceListDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PriceListDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PriceListDto
        $AllProperties = ("id", "timestamp", "name", "startDate", "endDate", "description", "currencyId", "tenantId", "unitId", "unitGroupId", "partnerVisible", "unitOfMeasureDependant", "enrolmentId")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startDate"))) { #optional property not found
            $StartDate = $null
        } else {
            $StartDate = $JsonParameters.PSobject.Properties["startDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "endDate"))) { #optional property not found
            $EndDate = $null
        } else {
            $EndDate = $JsonParameters.PSobject.Properties["endDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "currencyId"))) { #optional property not found
            $CurrencyId = $null
        } else {
            $CurrencyId = $JsonParameters.PSobject.Properties["currencyId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenantId"))) { #optional property not found
            $TenantId = $null
        } else {
            $TenantId = $JsonParameters.PSobject.Properties["tenantId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unitId"))) { #optional property not found
            $UnitId = $null
        } else {
            $UnitId = $JsonParameters.PSobject.Properties["unitId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unitGroupId"))) { #optional property not found
            $UnitGroupId = $null
        } else {
            $UnitGroupId = $JsonParameters.PSobject.Properties["unitGroupId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "partnerVisible"))) { #optional property not found
            $PartnerVisible = $null
        } else {
            $PartnerVisible = $JsonParameters.PSobject.Properties["partnerVisible"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unitOfMeasureDependant"))) { #optional property not found
            $UnitOfMeasureDependant = $null
        } else {
            $UnitOfMeasureDependant = $JsonParameters.PSobject.Properties["unitOfMeasureDependant"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enrolmentId"))) { #optional property not found
            $EnrolmentId = $null
        } else {
            $EnrolmentId = $JsonParameters.PSobject.Properties["enrolmentId"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "timestamp" = ${Timestamp}
            "name" = ${Name}
            "startDate" = ${StartDate}
            "endDate" = ${EndDate}
            "description" = ${Description}
            "currencyId" = ${CurrencyId}
            "tenantId" = ${TenantId}
            "unitId" = ${UnitId}
            "unitGroupId" = ${UnitGroupId}
            "partnerVisible" = ${PartnerVisible}
            "unitOfMeasureDependant" = ${UnitOfMeasureDependant}
            "enrolmentId" = ${EnrolmentId}
        }

        return $PSO
    }

}

