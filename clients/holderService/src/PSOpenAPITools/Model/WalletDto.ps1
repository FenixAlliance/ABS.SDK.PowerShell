#
# HolderService
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 2.0.1.4089
# Contact: support@fenix-alliance.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Timestamp
No description available.
.PARAMETER Balance
No description available.
.PARAMETER CryptoBalance
No description available.
.PARAMETER TestMode
No description available.
.PARAMETER Verified
No description available.
.PARAMETER Type
No description available.
.PARAMETER CurrencyId
No description available.
.PARAMETER ForexRate
No description available.
.PARAMETER BalanceInUsd
No description available.
.PARAMETER MainNetEtherBalance
No description available.
.PARAMETER EthereumAddress
No description available.
.PARAMETER EthereumPublicKey
No description available.
.PARAMETER EthereumPrivateKey
No description available.
.PARAMETER RollingReservePercent
No description available.
.OUTPUTS

WalletDto<PSCustomObject>
#>

function Initialize-WalletDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Balance},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${CryptoBalance},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${TestMode},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Verified},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CurrencyId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${ForexRate},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${BalanceInUsd},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${MainNetEtherBalance},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EthereumAddress},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EthereumPublicKey},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EthereumPrivateKey},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${RollingReservePercent}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => WalletDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "timestamp" = ${Timestamp}
            "balance" = ${Balance}
            "cryptoBalance" = ${CryptoBalance}
            "testMode" = ${TestMode}
            "verified" = ${Verified}
            "type" = ${Type}
            "currencyId" = ${CurrencyId}
            "forexRate" = ${ForexRate}
            "balanceInUsd" = ${BalanceInUsd}
            "mainNetEtherBalance" = ${MainNetEtherBalance}
            "ethereumAddress" = ${EthereumAddress}
            "ethereumPublicKey" = ${EthereumPublicKey}
            "ethereumPrivateKey" = ${EthereumPrivateKey}
            "rollingReservePercent" = ${RollingReservePercent}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WalletDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to WalletDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WalletDto<PSCustomObject>
#>
function ConvertFrom-JsonToWalletDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => WalletDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WalletDto
        $AllProperties = ("id", "timestamp", "balance", "cryptoBalance", "testMode", "verified", "type", "currencyId", "forexRate", "balanceInUsd", "mainNetEtherBalance", "ethereumAddress", "ethereumPublicKey", "ethereumPrivateKey", "rollingReservePercent")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "balance"))) { #optional property not found
            $Balance = $null
        } else {
            $Balance = $JsonParameters.PSobject.Properties["balance"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cryptoBalance"))) { #optional property not found
            $CryptoBalance = $null
        } else {
            $CryptoBalance = $JsonParameters.PSobject.Properties["cryptoBalance"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "testMode"))) { #optional property not found
            $TestMode = $null
        } else {
            $TestMode = $JsonParameters.PSobject.Properties["testMode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "verified"))) { #optional property not found
            $Verified = $null
        } else {
            $Verified = $JsonParameters.PSobject.Properties["verified"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "currencyId"))) { #optional property not found
            $CurrencyId = $null
        } else {
            $CurrencyId = $JsonParameters.PSobject.Properties["currencyId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "forexRate"))) { #optional property not found
            $ForexRate = $null
        } else {
            $ForexRate = $JsonParameters.PSobject.Properties["forexRate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "balanceInUsd"))) { #optional property not found
            $BalanceInUsd = $null
        } else {
            $BalanceInUsd = $JsonParameters.PSobject.Properties["balanceInUsd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mainNetEtherBalance"))) { #optional property not found
            $MainNetEtherBalance = $null
        } else {
            $MainNetEtherBalance = $JsonParameters.PSobject.Properties["mainNetEtherBalance"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ethereumAddress"))) { #optional property not found
            $EthereumAddress = $null
        } else {
            $EthereumAddress = $JsonParameters.PSobject.Properties["ethereumAddress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ethereumPublicKey"))) { #optional property not found
            $EthereumPublicKey = $null
        } else {
            $EthereumPublicKey = $JsonParameters.PSobject.Properties["ethereumPublicKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ethereumPrivateKey"))) { #optional property not found
            $EthereumPrivateKey = $null
        } else {
            $EthereumPrivateKey = $JsonParameters.PSobject.Properties["ethereumPrivateKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rollingReservePercent"))) { #optional property not found
            $RollingReservePercent = $null
        } else {
            $RollingReservePercent = $JsonParameters.PSobject.Properties["rollingReservePercent"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "timestamp" = ${Timestamp}
            "balance" = ${Balance}
            "cryptoBalance" = ${CryptoBalance}
            "testMode" = ${TestMode}
            "verified" = ${Verified}
            "type" = ${Type}
            "currencyId" = ${CurrencyId}
            "forexRate" = ${ForexRate}
            "balanceInUsd" = ${BalanceInUsd}
            "mainNetEtherBalance" = ${MainNetEtherBalance}
            "ethereumAddress" = ${EthereumAddress}
            "ethereumPublicKey" = ${EthereumPublicKey}
            "ethereumPrivateKey" = ${EthereumPrivateKey}
            "rollingReservePercent" = ${RollingReservePercent}
        }

        return $PSO
    }

}

