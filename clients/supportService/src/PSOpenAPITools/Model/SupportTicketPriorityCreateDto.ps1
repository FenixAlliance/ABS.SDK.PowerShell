#
# SupportService
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 2.0.1.4089
# Contact: support@fenix-alliance.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Title
No description available.
.PARAMETER Description
No description available.
.PARAMETER BusinessID
No description available.
.PARAMETER SupportEntitlementID
No description available.
.OUTPUTS

SupportTicketPriorityCreateDto<PSCustomObject>
#>

function Initialize-SupportTicketPriorityCreateDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BusinessID},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SupportEntitlementID}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SupportTicketPriorityCreateDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Title -and $Title.length -gt 255) {
            throw "invalid value for 'Title', the character length must be smaller than or equal to 255."
        }

        if (!$Title -and $Title.length -lt 0) {
            throw "invalid value for 'Title', the character length must be great than or equal to 0."
        }

        if (!$Description -and $Description.length -gt 1000) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 1000."
        }

        if (!$Description -and $Description.length -lt 0) {
            throw "invalid value for 'Description', the character length must be great than or equal to 0."
        }

        if (!$BusinessID -and $BusinessID.length -gt 36) {
            throw "invalid value for 'BusinessID', the character length must be smaller than or equal to 36."
        }

        if (!$BusinessID -and $BusinessID.length -lt 36) {
            throw "invalid value for 'BusinessID', the character length must be great than or equal to 36."
        }

        if (!$SupportEntitlementID -and $SupportEntitlementID.length -gt 36) {
            throw "invalid value for 'SupportEntitlementID', the character length must be smaller than or equal to 36."
        }

        if (!$SupportEntitlementID -and $SupportEntitlementID.length -lt 36) {
            throw "invalid value for 'SupportEntitlementID', the character length must be great than or equal to 36."
        }


        $PSO = [PSCustomObject]@{
            "title" = ${Title}
            "description" = ${Description}
            "businessID" = ${BusinessID}
            "supportEntitlementID" = ${SupportEntitlementID}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SupportTicketPriorityCreateDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to SupportTicketPriorityCreateDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SupportTicketPriorityCreateDto<PSCustomObject>
#>
function ConvertFrom-JsonToSupportTicketPriorityCreateDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SupportTicketPriorityCreateDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SupportTicketPriorityCreateDto
        $AllProperties = ("title", "description", "businessID", "supportEntitlementID")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title"))) { #optional property not found
            $Title = $null
        } else {
            $Title = $JsonParameters.PSobject.Properties["title"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "businessID"))) { #optional property not found
            $BusinessID = $null
        } else {
            $BusinessID = $JsonParameters.PSobject.Properties["businessID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "supportEntitlementID"))) { #optional property not found
            $SupportEntitlementID = $null
        } else {
            $SupportEntitlementID = $JsonParameters.PSobject.Properties["supportEntitlementID"].value
        }

        $PSO = [PSCustomObject]@{
            "title" = ${Title}
            "description" = ${Description}
            "businessID" = ${BusinessID}
            "supportEntitlementID" = ${SupportEntitlementID}
        }

        return $PSO
    }

}

