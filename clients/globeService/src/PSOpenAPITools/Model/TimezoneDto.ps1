#
# GlobeService
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 2.0.1.4089
# Contact: support@fenix-alliance.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Timestamp
No description available.
.PARAMETER Id
No description available.
.PARAMETER Name
No description available.
.PARAMETER DisplayName
No description available.
.PARAMETER UtcOffset
No description available.
.OUTPUTS

TimezoneDto<PSCustomObject>
#>

function Initialize-TimezoneDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UtcOffset}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => TimezoneDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "timestamp" = ${Timestamp}
            "id" = ${Id}
            "name" = ${Name}
            "displayName" = ${DisplayName}
            "utcOffset" = ${UtcOffset}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TimezoneDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to TimezoneDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TimezoneDto<PSCustomObject>
#>
function ConvertFrom-JsonToTimezoneDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => TimezoneDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in TimezoneDto
        $AllProperties = ("timestamp", "id", "name", "displayName", "utcOffset")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "utcOffset"))) { #optional property not found
            $UtcOffset = $null
        } else {
            $UtcOffset = $JsonParameters.PSobject.Properties["utcOffset"].value
        }

        $PSO = [PSCustomObject]@{
            "timestamp" = ${Timestamp}
            "id" = ${Id}
            "name" = ${Name}
            "displayName" = ${DisplayName}
            "utcOffset" = ${UtcOffset}
        }

        return $PSO
    }

}

