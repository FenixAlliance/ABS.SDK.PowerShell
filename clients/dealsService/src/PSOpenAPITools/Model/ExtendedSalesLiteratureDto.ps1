#
# DealsService
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 2.0.1.4089
# Contact: support@fenix-alliance.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Timestamp
No description available.
.PARAMETER Title
No description available.
.PARAMETER Content
No description available.
.PARAMETER Description
No description available.
.PARAMETER ModifiedDate
No description available.
.PARAMETER ExpirationDate
No description available.
.PARAMETER TenantId
No description available.
.PARAMETER EnrolmentId
No description available.
.PARAMETER SalesLiteratureTypeId
No description available.
.PARAMETER SalesLiteratureType
No description available.
.PARAMETER Tenant
No description available.
.OUTPUTS

ExtendedSalesLiteratureDto<PSCustomObject>
#>

function Initialize-ExtendedSalesLiteratureDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Content},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ModifiedDate},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ExpirationDate},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TenantId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EnrolmentId},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SalesLiteratureTypeId},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${SalesLiteratureType},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Tenant}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ExtendedSalesLiteratureDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "timestamp" = ${Timestamp}
            "title" = ${Title}
            "content" = ${Content}
            "description" = ${Description}
            "modifiedDate" = ${ModifiedDate}
            "expirationDate" = ${ExpirationDate}
            "tenantId" = ${TenantId}
            "enrolmentId" = ${EnrolmentId}
            "salesLiteratureTypeId" = ${SalesLiteratureTypeId}
            "salesLiteratureType" = ${SalesLiteratureType}
            "tenant" = ${Tenant}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ExtendedSalesLiteratureDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to ExtendedSalesLiteratureDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ExtendedSalesLiteratureDto<PSCustomObject>
#>
function ConvertFrom-JsonToExtendedSalesLiteratureDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ExtendedSalesLiteratureDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ExtendedSalesLiteratureDto
        $AllProperties = ("id", "timestamp", "title", "content", "description", "modifiedDate", "expirationDate", "tenantId", "enrolmentId", "salesLiteratureTypeId", "salesLiteratureType", "tenant")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title"))) { #optional property not found
            $Title = $null
        } else {
            $Title = $JsonParameters.PSobject.Properties["title"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "content"))) { #optional property not found
            $Content = $null
        } else {
            $Content = $JsonParameters.PSobject.Properties["content"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "modifiedDate"))) { #optional property not found
            $ModifiedDate = $null
        } else {
            $ModifiedDate = $JsonParameters.PSobject.Properties["modifiedDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expirationDate"))) { #optional property not found
            $ExpirationDate = $null
        } else {
            $ExpirationDate = $JsonParameters.PSobject.Properties["expirationDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenantId"))) { #optional property not found
            $TenantId = $null
        } else {
            $TenantId = $JsonParameters.PSobject.Properties["tenantId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enrolmentId"))) { #optional property not found
            $EnrolmentId = $null
        } else {
            $EnrolmentId = $JsonParameters.PSobject.Properties["enrolmentId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "salesLiteratureTypeId"))) { #optional property not found
            $SalesLiteratureTypeId = $null
        } else {
            $SalesLiteratureTypeId = $JsonParameters.PSobject.Properties["salesLiteratureTypeId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "salesLiteratureType"))) { #optional property not found
            $SalesLiteratureType = $null
        } else {
            $SalesLiteratureType = $JsonParameters.PSobject.Properties["salesLiteratureType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenant"))) { #optional property not found
            $Tenant = $null
        } else {
            $Tenant = $JsonParameters.PSobject.Properties["tenant"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "timestamp" = ${Timestamp}
            "title" = ${Title}
            "content" = ${Content}
            "description" = ${Description}
            "modifiedDate" = ${ModifiedDate}
            "expirationDate" = ${ExpirationDate}
            "tenantId" = ${TenantId}
            "enrolmentId" = ${EnrolmentId}
            "salesLiteratureTypeId" = ${SalesLiteratureTypeId}
            "salesLiteratureType" = ${SalesLiteratureType}
            "tenant" = ${Tenant}
        }

        return $PSO
    }

}

