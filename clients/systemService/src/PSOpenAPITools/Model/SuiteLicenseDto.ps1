#
# SystemService
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 2.0.1.4089
# Contact: support@fenix-alliance.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Timestamp
No description available.
.PARAMETER TenantId
No description available.
.PARAMETER LicenseString
No description available.
.PARAMETER EnrollmentId
No description available.
.PARAMETER ExpirationDate
No description available.
.PARAMETER AvailableSeats
No description available.
.PARAMETER TotalSeats
No description available.
.OUTPUTS

SuiteLicenseDto<PSCustomObject>
#>

function Initialize-SuiteLicenseDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TenantId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LicenseString},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EnrollmentId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${ExpirationDate},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${AvailableSeats},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${TotalSeats}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SuiteLicenseDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "timestamp" = ${Timestamp}
            "tenantId" = ${TenantId}
            "licenseString" = ${LicenseString}
            "enrollmentId" = ${EnrollmentId}
            "expirationDate" = ${ExpirationDate}
            "availableSeats" = ${AvailableSeats}
            "totalSeats" = ${TotalSeats}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SuiteLicenseDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to SuiteLicenseDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SuiteLicenseDto<PSCustomObject>
#>
function ConvertFrom-JsonToSuiteLicenseDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SuiteLicenseDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SuiteLicenseDto
        $AllProperties = ("id", "timestamp", "tenantId", "licenseString", "enrollmentId", "expirationDate", "availableSeats", "totalSeats")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenantId"))) { #optional property not found
            $TenantId = $null
        } else {
            $TenantId = $JsonParameters.PSobject.Properties["tenantId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "licenseString"))) { #optional property not found
            $LicenseString = $null
        } else {
            $LicenseString = $JsonParameters.PSobject.Properties["licenseString"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enrollmentId"))) { #optional property not found
            $EnrollmentId = $null
        } else {
            $EnrollmentId = $JsonParameters.PSobject.Properties["enrollmentId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expirationDate"))) { #optional property not found
            $ExpirationDate = $null
        } else {
            $ExpirationDate = $JsonParameters.PSobject.Properties["expirationDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "availableSeats"))) { #optional property not found
            $AvailableSeats = $null
        } else {
            $AvailableSeats = $JsonParameters.PSobject.Properties["availableSeats"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalSeats"))) { #optional property not found
            $TotalSeats = $null
        } else {
            $TotalSeats = $JsonParameters.PSobject.Properties["totalSeats"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "timestamp" = ${Timestamp}
            "tenantId" = ${TenantId}
            "licenseString" = ${LicenseString}
            "enrollmentId" = ${EnrollmentId}
            "expirationDate" = ${ExpirationDate}
            "availableSeats" = ${AvailableSeats}
            "totalSeats" = ${TotalSeats}
        }

        return $PSO
    }

}

