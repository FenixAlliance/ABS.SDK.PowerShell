#
# SupportService
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 2.0.1.4089
# Contact: support@fenix-alliance.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Timestamp
No description available.
.PARAMETER Notes
No description available.
.PARAMETER Title
No description available.
.PARAMETER Author
No description available.
.PARAMETER IsFolder
No description available.
.PARAMETER FileName
No description available.
.PARAMETER Abstract
No description available.
.PARAMETER KeyWords
No description available.
.PARAMETER ValidResponse
No description available.
.PARAMETER ParentFileUploadId
No description available.
.PARAMETER FilePath
No description available.
.PARAMETER File
No description available.
.PARAMETER BusinessID
No description available.
.PARAMETER BusinessProfileRecordID
No description available.
.PARAMETER Metadata
No description available.
.PARAMETER SupportRequestID
No description available.
.OUTPUTS

SupportRequestAttachmentCreateDto<PSCustomObject>
#>

function Initialize-SupportRequestAttachmentCreateDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Notes},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Author},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsFolder},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FileName},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Abstract},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${KeyWords},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ValidResponse},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ParentFileUploadId},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FilePath},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.IO.FileInfo]
        ${File},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BusinessID},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BusinessProfileRecordID},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Metadata},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SupportRequestID}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SupportRequestAttachmentCreateDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$BusinessID -and $BusinessID.length -gt 36) {
            throw "invalid value for 'BusinessID', the character length must be smaller than or equal to 36."
        }

        if (!$BusinessID -and $BusinessID.length -lt 36) {
            throw "invalid value for 'BusinessID', the character length must be great than or equal to 36."
        }

        if (!$BusinessProfileRecordID -and $BusinessProfileRecordID.length -gt 36) {
            throw "invalid value for 'BusinessProfileRecordID', the character length must be smaller than or equal to 36."
        }

        if (!$BusinessProfileRecordID -and $BusinessProfileRecordID.length -lt 36) {
            throw "invalid value for 'BusinessProfileRecordID', the character length must be great than or equal to 36."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "timestamp" = ${Timestamp}
            "notes" = ${Notes}
            "title" = ${Title}
            "author" = ${Author}
            "isFolder" = ${IsFolder}
            "fileName" = ${FileName}
            "abstract" = ${Abstract}
            "keyWords" = ${KeyWords}
            "validResponse" = ${ValidResponse}
            "parentFileUploadId" = ${ParentFileUploadId}
            "filePath" = ${FilePath}
            "file" = ${File}
            "businessID" = ${BusinessID}
            "businessProfileRecordID" = ${BusinessProfileRecordID}
            "metadata" = ${Metadata}
            "supportRequestID" = ${SupportRequestID}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SupportRequestAttachmentCreateDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to SupportRequestAttachmentCreateDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SupportRequestAttachmentCreateDto<PSCustomObject>
#>
function ConvertFrom-JsonToSupportRequestAttachmentCreateDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SupportRequestAttachmentCreateDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SupportRequestAttachmentCreateDto
        $AllProperties = ("id", "timestamp", "notes", "title", "author", "isFolder", "fileName", "abstract", "keyWords", "validResponse", "parentFileUploadId", "filePath", "file", "businessID", "businessProfileRecordID", "metadata", "supportRequestID")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "notes"))) { #optional property not found
            $Notes = $null
        } else {
            $Notes = $JsonParameters.PSobject.Properties["notes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title"))) { #optional property not found
            $Title = $null
        } else {
            $Title = $JsonParameters.PSobject.Properties["title"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "author"))) { #optional property not found
            $Author = $null
        } else {
            $Author = $JsonParameters.PSobject.Properties["author"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isFolder"))) { #optional property not found
            $IsFolder = $null
        } else {
            $IsFolder = $JsonParameters.PSobject.Properties["isFolder"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fileName"))) { #optional property not found
            $FileName = $null
        } else {
            $FileName = $JsonParameters.PSobject.Properties["fileName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "abstract"))) { #optional property not found
            $Abstract = $null
        } else {
            $Abstract = $JsonParameters.PSobject.Properties["abstract"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "keyWords"))) { #optional property not found
            $KeyWords = $null
        } else {
            $KeyWords = $JsonParameters.PSobject.Properties["keyWords"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "validResponse"))) { #optional property not found
            $ValidResponse = $null
        } else {
            $ValidResponse = $JsonParameters.PSobject.Properties["validResponse"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parentFileUploadId"))) { #optional property not found
            $ParentFileUploadId = $null
        } else {
            $ParentFileUploadId = $JsonParameters.PSobject.Properties["parentFileUploadId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "filePath"))) { #optional property not found
            $FilePath = $null
        } else {
            $FilePath = $JsonParameters.PSobject.Properties["filePath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "file"))) { #optional property not found
            $File = $null
        } else {
            $File = $JsonParameters.PSobject.Properties["file"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "businessID"))) { #optional property not found
            $BusinessID = $null
        } else {
            $BusinessID = $JsonParameters.PSobject.Properties["businessID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "businessProfileRecordID"))) { #optional property not found
            $BusinessProfileRecordID = $null
        } else {
            $BusinessProfileRecordID = $JsonParameters.PSobject.Properties["businessProfileRecordID"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metadata"))) { #optional property not found
            $Metadata = $null
        } else {
            $Metadata = $JsonParameters.PSobject.Properties["metadata"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "supportRequestID"))) { #optional property not found
            $SupportRequestID = $null
        } else {
            $SupportRequestID = $JsonParameters.PSobject.Properties["supportRequestID"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "timestamp" = ${Timestamp}
            "notes" = ${Notes}
            "title" = ${Title}
            "author" = ${Author}
            "isFolder" = ${IsFolder}
            "fileName" = ${FileName}
            "abstract" = ${Abstract}
            "keyWords" = ${KeyWords}
            "validResponse" = ${ValidResponse}
            "parentFileUploadId" = ${ParentFileUploadId}
            "filePath" = ${FilePath}
            "file" = ${File}
            "businessID" = ${BusinessID}
            "businessProfileRecordID" = ${BusinessProfileRecordID}
            "metadata" = ${Metadata}
            "supportRequestID" = ${SupportRequestID}
        }

        return $PSO
    }

}

