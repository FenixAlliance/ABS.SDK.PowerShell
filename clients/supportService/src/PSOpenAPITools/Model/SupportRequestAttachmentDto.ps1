#
# SupportService
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 2.0.1.4089
# Contact: support@fenix-alliance.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Timestamp
No description available.
.PARAMETER Notes
No description available.
.PARAMETER Title
No description available.
.PARAMETER Author
No description available.
.PARAMETER IsFolder
No description available.
.PARAMETER Hash
No description available.
.PARAMETER FileUrl
No description available.
.PARAMETER FilePath
No description available.
.PARAMETER FileName
No description available.
.PARAMETER Abstract
No description available.
.PARAMETER KeyWords
No description available.
.PARAMETER Metadata
No description available.
.PARAMETER FileLength
No description available.
.PARAMETER ContentType
No description available.
.PARAMETER ParentFileId
No description available.
.PARAMETER ValidResponse
No description available.
.PARAMETER UserId
No description available.
.PARAMETER TenantId
No description available.
.PARAMETER EnrollmentId
No description available.
.PARAMETER SocialProfileId
No description available.
.PARAMETER FolderPath
No description available.
.PARAMETER SupportRequestID
No description available.
.OUTPUTS

SupportRequestAttachmentDto<PSCustomObject>
#>

function Initialize-SupportRequestAttachmentDto {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Timestamp},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Notes},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Title},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Author},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsFolder},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Hash},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FileUrl},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FilePath},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FileName},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Abstract},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${KeyWords},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Metadata},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${FileLength},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ContentType},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ParentFileId},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ValidResponse},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserId},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TenantId},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EnrollmentId},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SocialProfileId},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FolderPath},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SupportRequestID}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SupportRequestAttachmentDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "timestamp" = ${Timestamp}
            "notes" = ${Notes}
            "title" = ${Title}
            "author" = ${Author}
            "isFolder" = ${IsFolder}
            "hash" = ${Hash}
            "fileUrl" = ${FileUrl}
            "filePath" = ${FilePath}
            "fileName" = ${FileName}
            "abstract" = ${Abstract}
            "keyWords" = ${KeyWords}
            "metadata" = ${Metadata}
            "fileLength" = ${FileLength}
            "contentType" = ${ContentType}
            "parentFileId" = ${ParentFileId}
            "validResponse" = ${ValidResponse}
            "userId" = ${UserId}
            "tenantId" = ${TenantId}
            "enrollmentId" = ${EnrollmentId}
            "socialProfileId" = ${SocialProfileId}
            "folderPath" = ${FolderPath}
            "supportRequestID" = ${SupportRequestID}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SupportRequestAttachmentDto<PSCustomObject>

.DESCRIPTION

Convert from JSON to SupportRequestAttachmentDto<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SupportRequestAttachmentDto<PSCustomObject>
#>
function ConvertFrom-JsonToSupportRequestAttachmentDto {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SupportRequestAttachmentDto' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SupportRequestAttachmentDto
        $AllProperties = ("id", "timestamp", "notes", "title", "author", "isFolder", "hash", "fileUrl", "filePath", "fileName", "abstract", "keyWords", "metadata", "fileLength", "contentType", "parentFileId", "validResponse", "userId", "tenantId", "enrollmentId", "socialProfileId", "folderPath", "supportRequestID")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "notes"))) { #optional property not found
            $Notes = $null
        } else {
            $Notes = $JsonParameters.PSobject.Properties["notes"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "title"))) { #optional property not found
            $Title = $null
        } else {
            $Title = $JsonParameters.PSobject.Properties["title"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "author"))) { #optional property not found
            $Author = $null
        } else {
            $Author = $JsonParameters.PSobject.Properties["author"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "isFolder"))) { #optional property not found
            $IsFolder = $null
        } else {
            $IsFolder = $JsonParameters.PSobject.Properties["isFolder"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "hash"))) { #optional property not found
            $Hash = $null
        } else {
            $Hash = $JsonParameters.PSobject.Properties["hash"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fileUrl"))) { #optional property not found
            $FileUrl = $null
        } else {
            $FileUrl = $JsonParameters.PSobject.Properties["fileUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "filePath"))) { #optional property not found
            $FilePath = $null
        } else {
            $FilePath = $JsonParameters.PSobject.Properties["filePath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fileName"))) { #optional property not found
            $FileName = $null
        } else {
            $FileName = $JsonParameters.PSobject.Properties["fileName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "abstract"))) { #optional property not found
            $Abstract = $null
        } else {
            $Abstract = $JsonParameters.PSobject.Properties["abstract"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "keyWords"))) { #optional property not found
            $KeyWords = $null
        } else {
            $KeyWords = $JsonParameters.PSobject.Properties["keyWords"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "metadata"))) { #optional property not found
            $Metadata = $null
        } else {
            $Metadata = $JsonParameters.PSobject.Properties["metadata"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fileLength"))) { #optional property not found
            $FileLength = $null
        } else {
            $FileLength = $JsonParameters.PSobject.Properties["fileLength"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contentType"))) { #optional property not found
            $ContentType = $null
        } else {
            $ContentType = $JsonParameters.PSobject.Properties["contentType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parentFileId"))) { #optional property not found
            $ParentFileId = $null
        } else {
            $ParentFileId = $JsonParameters.PSobject.Properties["parentFileId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "validResponse"))) { #optional property not found
            $ValidResponse = $null
        } else {
            $ValidResponse = $JsonParameters.PSobject.Properties["validResponse"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userId"))) { #optional property not found
            $UserId = $null
        } else {
            $UserId = $JsonParameters.PSobject.Properties["userId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenantId"))) { #optional property not found
            $TenantId = $null
        } else {
            $TenantId = $JsonParameters.PSobject.Properties["tenantId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enrollmentId"))) { #optional property not found
            $EnrollmentId = $null
        } else {
            $EnrollmentId = $JsonParameters.PSobject.Properties["enrollmentId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "socialProfileId"))) { #optional property not found
            $SocialProfileId = $null
        } else {
            $SocialProfileId = $JsonParameters.PSobject.Properties["socialProfileId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "folderPath"))) { #optional property not found
            $FolderPath = $null
        } else {
            $FolderPath = $JsonParameters.PSobject.Properties["folderPath"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "supportRequestID"))) { #optional property not found
            $SupportRequestID = $null
        } else {
            $SupportRequestID = $JsonParameters.PSobject.Properties["supportRequestID"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "timestamp" = ${Timestamp}
            "notes" = ${Notes}
            "title" = ${Title}
            "author" = ${Author}
            "isFolder" = ${IsFolder}
            "hash" = ${Hash}
            "fileUrl" = ${FileUrl}
            "filePath" = ${FilePath}
            "fileName" = ${FileName}
            "abstract" = ${Abstract}
            "keyWords" = ${KeyWords}
            "metadata" = ${Metadata}
            "fileLength" = ${FileLength}
            "contentType" = ${ContentType}
            "parentFileId" = ${ParentFileId}
            "validResponse" = ${ValidResponse}
            "userId" = ${UserId}
            "tenantId" = ${TenantId}
            "enrollmentId" = ${EnrollmentId}
            "socialProfileId" = ${SocialProfileId}
            "folderPath" = ${FolderPath}
            "supportRequestID" = ${SupportRequestID}
        }

        return $PSO
    }

}

